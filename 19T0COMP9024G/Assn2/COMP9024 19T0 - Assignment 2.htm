<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html hola_ext_inject="disabled">
<head>
    <meta http-equiv="Content-Type" content="text/html;">
    <title>COMP9024 19T0 - Assignment 2</title>


    <style>

        body {
            font-size: 11pt;
            font-family: arial, sans-serif;
            margin: 10px 20px;
        }
        p {
            margin-left:40px;
        }
        a {
            color: blue;
            text-decoration: none;
        }

        a.active {
            color:blue;
            text-decoration: none;
        }

        a.inactive {
            color: #BBBBDD;
            text-decoration: none;
        }

        a[href]:hover {
            color: #CC0000;
            background: #FFFFCC;
        }

        small {
            font-size: 75%
        }

        pre {
            background: #fcfcff;
            border: thin dotted #e4e4f5;
            margin: 5px 20px 5px 20px;
            padding: 4px 8px;
            border-radius: 10px;
        }

        tt {
            font-size: 1.0em;
            color: #107F80
        }

        span.toggle {
            font-size: 67%;
        }

        span.notice {
            font-size: 110%;
        }

        span.tiny {
            font-size: 75%;
            font-weight: normal;
        }

        span.heading {
            font-size: 18pt;
            color: #4444CC;
        }

        span.subheading {
            font-size: 16pt;
            color: #000000;
            font-weight: normal;
        }

        span.marks {
            font-weight: normal;
            font-size: 75%;
        }

        span.identifier {
            color: #993300;
            font-size: 110%;
            font-weight: bold;
            font-family: courier;
        }

        span.contentLink {
            font-weight: bold;
            font-size: 110%
        }

        span.contentNote {
            font-weight: normal;
            font-size: 85%;
        }

        tr.heading {
            font-size: large;
            font-weight: bold;
            background-color: #DDAA77;
        }

        table.note {
            border: thin solid black;
            padding: 2pt;
            width: 75%
        }

        div.note {
            border: thin solid black;
            font-size: 90%;
            margin: 5px 60px 5px 60px;
            padding: 4px 8px;
        }

        dt {
            margin-top: 10px;
        }

        dt.item {
            font-weight: bold;
        }

        h2 {
            font-size: 16pt;
            font-weight: 300;
            color: green;
            background-color: aliceblue;
            padding: 10px 20px;
            border-radius: 8px;
            border-bottom: 1px solid lightblue;
            
        }

        h3 {
            font-size: 14pt;
            font-weight: 300;
            color: green;
        }

        .h2tt {
            font-size: 17pt;
            font-weight: 300;
            color: #4444CC;
            font-family: courier;
        }

        .h3tt {
            font-size: 15pt;
            font-weight: 300;
            color: #4444CC;
            font-family: courier;
        }

        .red {
            color: #CC0000;
        }

        .green {
            color: #006600;
        }

        .brown {
            color: #993300;
        }

        .grey {
            color: #AAAAAA;
        }

        .comment {
            font-size: 90%;
            color: #666666
        }

        .important {
            font-weight: bold;
            color: #CC0000;
        }

        .bigQ {
            font-size: 13pt;
            font-style: italic;
        }

        dd {
            color: rgb(86, 86, 86);;
        }
        
        ul { 
            margin-left:40px;
        }

        li {
            margin-top: 6px;
        }
        
        td{
            border: 1px solid lightgrey;
        }
    </style>


</head>
<p>

<div align="center">


    <h2><span style="font-size:18pt">COMP9024: Assignment 2 </span><br>
    <span style="font-size:22pt">Simple Graph structure-based Search Engine </span></h2>

    <p style="width:70%" >[The specification may change.
    A notice on the class web page will be posted after each revision,
    so please check class notice board frequently.]
    </p>
</div>


<div style='border-left:2px solid lightgrey; margin: 2px 30px; padding: 0px 10px;'>
    <div style="font-weight:bold; color: darkslategray;">Change log:</div>
    <ul>
	<li> No entry as yet!
	
    </ul>
</div>

</p>


<h2>Objectives</h2>
<ul>
    <li>to implement a simple search engine based on the well known PageRank algorithm (simplified).
    <li>to give you further practice with C and advanced data structures (Graph and BST ADTs)
</ul>

<h2>Admin</h2>
<table border="0" cellpadding="4"  style="margin-left:40px;">
    <tbody style="font-size: 11pt; border:1px dotted lightgrey;">
    <tr valign="top">
        <td><b>Marks</b></td>
        <td>15 marks towards total course marks
        </td>
    </tr>

    <tr valign="top">
        <td><b>Due</b></td>
        <td>11pm Sunday 03 Feb 2019. </td>
    </tr>
    <tr valign="top">
        <td><b>Late<br>Penalty</b></td>
        <td>2 marks per day off the ceiling.<br>
            Last day to submit this assignment is 5pm Tuesday 05 Feb 2019, of course with late penalty.
        </td>
    </tr>
    <tr valign="top">
        <td><b>Submit</b></td>
        <td>
            Read instructions in the <a href="#Submission">"Submission"</a> section below.
        </td>

    </tr>

    </tbody>
</table>


<h2>Aim</h2>


<p>
    In this assignment, your task is to implement a simple search engine using the well known algorithm PageRank, simplified for this assignment, of course!. You should start by reading the
    wikipedia entries on the topic. Later I will also discuss these topics in the lecture.
<ul>
    <li><a href="https://en.wikipedia.org/wiki/PageRank" target="_blank">PageRank (read up to the section "Damping factor")</a></li>
</ul>

<p>
    The main focus of this assignment is to build a graph structure, calculate  PageRanks and rank pages
    based one these values. You don't need to spend time crawling, collecting and parsing weblinks for this assignment.
    You will be provided with a collection of "web pages" with the required information for this assignment in a easy to
    use format. For example, each page has two sections,
<ul>
    <li>
        Section-1 contains urls representing outgoing links.
        Urls are separated by one or more blanks, across multiple lines.
    </li>
    <li>
        Section-2 contains selected words extracted from the url. Words are
        separated by one or more spaces, spread across multiple lines.
    </li>
</ul>

<p><i>Hint:</i> You can assume that maximum length of a line would be 1000 characters. 
You need to use a dynamic data structure(s) to handle words in a file and across files, no need to know max words beforehand.
</p>



<p>Example file <tt>url31.txt</tt></p>
    <pre>
    #start Section-1

    url2  url34  url1 url26
    url52 url21
    url74  url6 url82

    #end Section-1

    #start Section-2

    Mars has long been the subject of human interest. Early telescopic observations
    revealed color changes on the surface that were attributed to seasonal vegetation
    and apparent linear features were ascribed to intelligent design.

    #end Section-2
    </pre>

</p>


<div style="margin: 6px 10px;">
<p> <span style="" >Your tasks in summary: </span>
    <ul>
    <li><i>Calculate PageRanks</i>: You need to create a graph structure that represents
    a hyperlink structure of given collection of "web pages" and for each page (node in your graph) calculate  PageRank value
    and other graph properties.
    <li><i>Inverted Index</i>: You need to create "inverted index" that provides a list of pages for every word in a given collection of pages.
    <li><i>Search Engine</i>: Your search engine will use the given inverted index to find pages where query
    term(s) appear and rank these pages using their PageRank values (see below for  more details)
    </ul>
</p>


</div>

<h3> How to get started Hints and Sample files</h3>
<ul>

    <li>Hints on <a href="HowToImplement-Ass2.pdf">"How to Implement Ass2" (HowToImplement-Ass2.pdf)</a>, will be discussed in the lecture.</li>
    <li>Sample files for <a href="ass2-getting-started.zip">How to Get Started (ass2-getting-started.zip)</a>, will be discussed in the lecture.</li>
    <li><a href="samples/Sample1.zip">Sample1.zip</a></li>
</ul>

<h3>Additional files</h3>

<p>You can submit additional supporting files, <tt>*.c</tt> and
    <tt>*.h</tt>, for this
    assignment. For example, you may implement your graph adt in files <tt>graph.c</tt> and <tt>graph.h</tt> and
    submit these two files along with other required
    files as mentioned below.
</p>
<hr>

<h2>Part-A: Calculate  PageRanks</h2>

<p>You need to write a program in the file <tt>pagerank.c</tt> that reads data from a given collection of pages
    in the file <tt>collection.txt</tt>
    and builds a graph structure using Adjacency Matrix or List Representation.
    Using the algorithm described below, calculate  PageRank  for every url in the file <tt>collection.txt</tt>. In
    this file, urls are separated by one or more spaces or/and new line character.
    Add suffix <tt>.txt</tt> to a url to obtain file name of the corresponding "web page". For example, file <tt>url24.txt</tt>
    contains the required
    information for <tt>url24</tt>.
</p>


<p>Example file <tt>collection.txt</tt></p>
<pre>
    url25   url31 url2
       url102   url78
    url32  url98 url33
</pre>

<p>
    Simplified PageRank Algorithm (for this assignment)
    <pre>
        <b>PageRank(d, diffPR, maxIterations)</b>

            Read "web pages" from the collection in file "collection.txt"
            and build a graph structure using Adjacency List Representation

            N = number of urls in the collection
            For each url <i>p<sub>i</sub></i> in the collection
                <img src="fig_pr_0.png" height="40px" >
            End For

            iteration = 0;
            diff = diffPR;   // to enter the following loop

            While (iteration < maxIteration AND diff >= diffPR)
                iteration++;


                <img src="fig_pr.png" height="70px" >
                        where,
                            - <img src="fig_M_P_i.png" height="20px"  > is a set containing links(urls) pointing to pi
                                    (ignore self-loops and parallel edges)
                            - <img src="fig_L.png" height="20px" style="vertical-align: bottom;"> is out degree of <img src="fig_p_j.png" height="20px" style="vertical-align: bottom;">
                            - <img src="fig_t_1.png" height="20px" style="vertical-align: bottom;" > corresponds to value of "iteration"
                                    


                <img src="fig_diff.png" height="70px" >

	     End While
    </pre>

</p>

<p>
    Your program in <tt>pagerank.c</tt> will take three arguments
    (<b>d</b> - damping factor, <b>diffPR</b> - difference in PageRank sum, <b>maxIterations</b> - maximum iterations)
    and using the algorithm described in this section, calculate  PageRank for every url.
</p>

<p>For example, </p>
    <pre>
    % pagerank 0.85  0.00001  1000
    </pre>
<p>
    Your program should output a list of urls in descending order of  PageRank values 
   (use format string <tt>"%.7f"</tt>) to a file
    named <tt>pagerankList.txt</tt>.
    The list should also include out degrees (number of out going links) for each url, along with its  PageRank value.
    The values in the list should be comma separated. For example, <tt>pagerankList.txt</tt> may contain the following:
</p>

<p>Example file <tt>pagerankList.txt</tt></p>

    <pre>
    url31, 3, 0.2623546
    url21, 1, 0.1843112
    url34, 6, 0.1576851
    url22, 4, 0.1520093
    url32, 6, 0.0925755
    url23, 4, 0.0776758
    url11, 3, 0.0733884
    </pre>
</p>


<div style="border:1px solid grey; border-radius:20px; padding:10px 40px; 
			background-color: lightyellow; margin:10px 100px;">
    <h4 id="sample1A">Sample Files for Part-A</h4>
<p>
    You can download the following three sample files with expected <tt>pagerankList.txt</tt> files. 
    </p>

    <p>Use format string <tt>"%.7f"</tt> to output pagerank values.
	Please note that your pagerank values might be slightly different
    to that provided in these samples. This might be due to the way you carry out calculations.
     However, make sure that your pagerank values match to say first 6 decimal points to the expected values.
    For example, say an expected value is  0.1843112, your value could be 0.184311x where x could be any digit.
    </p>

    <p>All the sample files were generated using the following command:

<pre>
% pagerank  0.85  0.00001  1000
</pre>
    </p>

    <ul>
        <li> <a href="samples/aEx1.zip">aEx1</a>
        <li> <a href="samples/aEx2.zip">aEx2</a>
        <li> <a href="samples/aEx3.zip">aEx3</a>
    </ul>
</div>


<h2>Part-B: Inverted Index</h2>

<p>You need to write a program in the file named <tt>inverted.c</tt> that reads data from a given collection of pages in
    <tt>collection.txt</tt> and generates an "inverted index" that provides a sorted list (set) of urls for every word in a
    given collection of pages. Before inserting words in your index, you need to "normalise" words by,
    <ul>
    <li>removing leading and trailing spaces,
    <li>converting all characters to lowercase,
    <li>remove the following punctuation marks, if they appear at the end of a word:<br>
            '.' (dot), ',' (comma), ';' (semicolon), ? (question mark)
    </ul>
    
    <p>In each sorted list (set), duplicate urls are not allowed.
    Your program should output this "inverted index" to a file named <tt>invertedIndex.txt</tt>.
    One line per word, words should be alphabetically ordered, using ascending order. 
    Each list of urls (for a single word) should be alphabetically ordered, using ascending order.
</p>

<p>Example file <tt>invertedIndex.txt</tt></p>
    <pre>
    design  url2 url25 url31 url61 
    mars  url101 url25 url31 
    vegetation  url31 url61
    </pre>

</p>
<p><b>Note</b>: for this part, in your output file, on each line, a word and urls must be separated by one (or more) spaces. The testing program will ignore additional spaces.
</p>

<h2>Part-C: Search Engine</h2>

<p> Write a simple search engine in file <tt>searchPagerank.c</tt> that given search terms (words) as commandline
    arguments, finds pages with one or more search terms and 
    outputs (to stdout) top 30 pages  in descending order of number of search terms found and then within each group, descending order of  PageRank. 
    If number of matches are less than 30, output all of them.
 </p>
 <p>   
    Your program must use data available in two files <tt>invertedIndex.txt</tt> and <tt>pagerankList.txt</tt>, and must
    derive result
    from them. We will test this program independently to your solutions for "A" and "B".

</p>
<p><b>Note:</b>
For this part,
<ul>
<li>each line in "invertedIndex.txt" contains - a word and the corresponding urls separated by one (or more) spaces. Your program for Part-C needs to be able to handle such an input. Please see the sample program provided "exTkns.c" .
<li>
each line in "pagerankList.txt" contains - url, out-degree and pagerank. To simplify your task, you can assume that they are separated by ", " - that is a comma and one space.
</ul>
</p>

<p>

<p>Example: </p>
    <pre>
    % searchPagerank  mars  design
    url31
    url25
    </pre>

</p>


<hr style="margin-top:60px;">
<a name="Submission"></a>
<h2>Submission </h2>



<p><b style="font-size:1.0em;">Additional files:</b> You can submit additional supporting files, <tt>*.c</tt> and <tt>*.h</tt>,
    for this assignment.

</p>
<p style='color:red'>IMPORTANT: Make sure that your additional files (*.c) DO NOT have "main" function.
</p>

<p>
For example, you may implement your graph adt in files <tt>graph.c</tt> and <tt>graph.h</tt> and
submit these two files along with other required
files as mentioned below. However, make sure  that these files do not have "main" function.
</p>


<p>I explain below how we will test your submission, hopefully this will answer all of your questions.
</p>
<p>You need to submit the following files, along with your supporting files (*.c and *.h):</p>
<ul>
    <li>pagerank.c</li>
    <li>inverted.c</li>
    <li>searchPagerank.c</li>
</ul>
<p>Now say we want to mark your <tt>pagerank.c</tt> program. The auto marking program will take all your supporting files
(other *.h and *.c) files, along with <tt>pagerank.c</tt> and execute the following command to generate executable
file say called pagerank. Note that the other two files from the above list
(<tt>inverted.c</tt> and <tt>searchPagerank.c</tt>) will be removed from the dir:</p>

<pre>% gcc -Wall -lm -Werror *.c  -o pagerank</pre>


<p>
    So we will <b>not use your Makefile</b> (if any). The above command will generate object files from your supporting
    files and the file to be tested (say <tt>pagerank.c</tt>), links these object files and generates executable file,
    say <tt>pagerank</tt> in the above example. Again, please make sure that you <b>DO NOT have main function in your supporting files</b> (other *.c files you submit).
</p>

<p>    We will use similar approach to generate other two executables
    (for <tt>inverted.c</tt> and  <tt>searchPagerank.c</tt>).
</p>


<h3 >How to Submit</h3>


<p>Go to the following submission page, select the tab named "Make Submission", and follow the instructions. 
The submission system will try to compile each required file, and report the outcome (ok or error). Please see the output, and correct any error. If you do not submit a file(s) for a task(s), it will report it as an error(s). 
</p>

<ul>
<li><a href="https://webcms3.cse.unsw.edu.au/COMP9024/19T0/resources/21614">Assignment 2 Submission Page</a>
</ul>



<p style="margin-left:60px;">

<!--
You <b>can now submit this assignment</b>, click on "<a href=' '>Make Submission</a>" tab, and follow the instructions. </p> 
<p> The submission system will try to compile each required file, and report the outcome (ok or error). Please see the output, and correct any error. If you do not submit a file(s) for a task(s), it will report it as an error(s). 
</p>
-->

<hr>
<h2>Plagiarism</h2>
<p>    You are allowed to use code from the course material (for example, available as part of the labs, lectures and tutorials). If you use code from the course material, please <b>clearly acknowledge</b> it by including a comment(s) in your file. If you have questions about the assignment, ask your tutor.
</p>	
<p>Your program must be entirely your own work. Plagiarism detection software compares all submissions pairwise (including submissions for similar projects in previous years, if applicable) and serious penalties will be applied, particularly in the case of repeat offences.</p>

<p><b><i>Do not copy from others; do not allow anyone to see your code, not even after the deadline</i></b></p>

<p>Please refer to the on-line sources to help you understand what plagiarism is and how it is dealt with at UNSW:</p>
<ul>
	<li><a href="https://student.unsw.edu.au/plagiarism">Plagiarism and Academic Integrity</a></li>
	<li><a href="https://www.gs.unsw.edu.au/policy/documents/plagiarismprocedure.pdf">UNSW Plagiarism Procedure</a></li>
</ul>


<p>Before submitting any work you should read and understand the sub section named <i><b>Plagiarism</b></i> in the course outline. 
    We regard unacknowledged copying of material, in whole or part, as an extremely serious offence.
    For further information, see <a href="https://webcms3.cse.unsw.edu.au/COMP9024/19T0/outline">the course outline</a>.
</p>

<hr>
<p style="text-align: center"> -- end -- </p>


</body>
</html>
